
Week6-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000448  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e0  080005e8  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e0  080005e0  000015e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005e0  080005e0  000015e8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005e0  080005e8  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e0  080005e0  000015e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005e4  080005e4  000015e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005e8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005e8  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000128f  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f6  00000000  00000000  000028a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00002da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000086  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df15  00000000  00000000  00002ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016eb  00000000  00000000  00010e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000503d2  00000000  00000000  000124f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000628c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a8  00000000  00000000  0006290c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00062ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005c8 	.word	0x080005c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080005c8 	.word	0x080005c8

080001d8 <Timer2_PWM_Init>:
#include <TimerConf.h>

void Timer2_PWM_Init(void){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	// Enable GPIOA and TIM2 clocks
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001de:	4b37      	ldr	r3, [pc, #220]	@ (80002bc <Timer2_PWM_Init+0xe4>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a36      	ldr	r2, [pc, #216]	@ (80002bc <Timer2_PWM_Init+0xe4>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80001ea:	4b34      	ldr	r3, [pc, #208]	@ (80002bc <Timer2_PWM_Init+0xe4>)
 80001ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001ee:	4a33      	ldr	r2, [pc, #204]	@ (80002bc <Timer2_PWM_Init+0xe4>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6413      	str	r3, [r2, #64]	@ 0x40

	// Set PA0 output and to alternate function mode
	GPIOA->MODER &= ~GPIO_MODER_MODE0_Msk;
 80001f6:	4b32      	ldr	r3, [pc, #200]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a31      	ldr	r2, [pc, #196]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 80001fc:	f023 0303 	bic.w	r3, r3, #3
 8000200:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE0_1;
 8000202:	4b2f      	ldr	r3, [pc, #188]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2e      	ldr	r2, [pc, #184]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 8000208:	f043 0302 	orr.w	r3, r3, #2
 800020c:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL0);
 800020e:	4b2c      	ldr	r3, [pc, #176]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 8000210:	6a1b      	ldr	r3, [r3, #32]
 8000212:	4a2b      	ldr	r2, [pc, #172]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 8000214:	f023 030f 	bic.w	r3, r3, #15
 8000218:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL0_0;
 800021a:	4b29      	ldr	r3, [pc, #164]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 800021c:	6a1b      	ldr	r3, [r3, #32]
 800021e:	4a28      	ldr	r2, [pc, #160]	@ (80002c0 <Timer2_PWM_Init+0xe8>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6213      	str	r3, [r2, #32]

	/* Configure TIM2 for PWM */

	//Variables for clocks, prescaler and period
	// timer_clock = 48000000;
	uint32_t prescaler = 48-1; // 48E6/48 = 1E6
 8000226:	232f      	movs	r3, #47	@ 0x2f
 8000228:	607b      	str	r3, [r7, #4]
	uint32_t pwmFreq = 1000-1; // 1E6/1E3 = 1E3, 1 kHz
 800022a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800022e:	603b      	str	r3, [r7, #0]

	// Configure prescaler and auto-reload register

	TIM2->PSC = prescaler;
 8000230:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->ARR = pwmFreq;
 8000238:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Set PWM mode 1 on channel 1
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1M;
 8000240:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800024a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800024e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8000250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800025a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800025e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;
 8000260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	6193      	str	r3, [r2, #24]

	// Enable output on TIM2_CH1
	TIM2->CCER |= TIM_CCER_CC1E;
 8000270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000274:	6a1b      	ldr	r3, [r3, #32]
 8000276:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6213      	str	r3, [r2, #32]
	// Auto-reload preload enable
	TIM2->CR1 |= TIM_CR1_ARPE;
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028e:	6013      	str	r3, [r2, #0]
	//Generate update event
	TIM2->EGR |= TIM_EGR_UG;
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6153      	str	r3, [r2, #20]
	// Enable TIM2 counter
	TIM2->CR1 |= TIM_CR1_CEN;
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000

080002c4 <Timer2_SetDutyCycle>:
	// Enable TIM2 counter
	TIM2->CR1 |= TIM_CR1_CEN;
}


void Timer2_SetDutyCycle(uint16_t duty_percent){
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	80fb      	strh	r3, [r7, #6]
	if (duty_percent > 100) duty_percent = 100;
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	2b64      	cmp	r3, #100	@ 0x64
 80002d2:	d901      	bls.n	80002d8 <Timer2_SetDutyCycle+0x14>
 80002d4:	2364      	movs	r3, #100	@ 0x64
 80002d6:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = (TIM2->ARR + 1)*duty_percent/100;
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002de:	3301      	adds	r3, #1
 80002e0:	88fa      	ldrh	r2, [r7, #6]
 80002e2:	fb02 f303 	mul.w	r3, r2, r3
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ea:	4905      	ldr	r1, [pc, #20]	@ (8000300 <Timer2_SetDutyCycle+0x3c>)
 80002ec:	fba1 1303 	umull	r1, r3, r1, r3
 80002f0:	095b      	lsrs	r3, r3, #5
 80002f2:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	51eb851f 	.word	0x51eb851f

08000304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	2b00      	cmp	r3, #0
 8000314:	db0b      	blt.n	800032e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f003 021f 	and.w	r2, r3, #31
 800031c:	4907      	ldr	r1, [pc, #28]	@ (800033c <__NVIC_EnableIRQ+0x38>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	095b      	lsrs	r3, r3, #5
 8000324:	2001      	movs	r0, #1
 8000326:	fa00 f202 	lsl.w	r2, r0, r2
 800032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100

08000340 <pc13_exti_init>:
#include "exti.h"

void pc13_exti_init(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop

	__disable_irq();

	// Enable clock access to GPIO C

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000348:	4b18      	ldr	r3, [pc, #96]	@ (80003ac <pc13_exti_init+0x6c>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	4a17      	ldr	r2, [pc, #92]	@ (80003ac <pc13_exti_init+0x6c>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6313      	str	r3, [r2, #48]	@ 0x30

	// Set PC13 as Input

	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8000354:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <pc13_exti_init+0x70>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a15      	ldr	r2, [pc, #84]	@ (80003b0 <pc13_exti_init+0x70>)
 800035a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800035e:	6013      	str	r3, [r2, #0]

	// Enable clock access to SYSCFG

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000360:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <pc13_exti_init+0x6c>)
 8000362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000364:	4a11      	ldr	r2, [pc, #68]	@ (80003ac <pc13_exti_init+0x6c>)
 8000366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800036a:	6453      	str	r3, [r2, #68]	@ 0x44

	// Select PORTC for EXTI13

	SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13;
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <pc13_exti_init+0x74>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a10      	ldr	r2, [pc, #64]	@ (80003b4 <pc13_exti_init+0x74>)
 8000372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000376:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 8000378:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <pc13_exti_init+0x74>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <pc13_exti_init+0x74>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6153      	str	r3, [r2, #20]


	// Unmask EXTI13

	EXTI->IMR |= EXTI_IMR_IM13;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <pc13_exti_init+0x78>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0b      	ldr	r2, [pc, #44]	@ (80003b8 <pc13_exti_init+0x78>)
 800038a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800038e:	6013      	str	r3, [r2, #0]

	// Select falling edge trigger

	EXTI->FTSR |= EXTI_FTSR_TR13;
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <pc13_exti_init+0x78>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a08      	ldr	r2, [pc, #32]	@ (80003b8 <pc13_exti_init+0x78>)
 8000396:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800039a:	60d3      	str	r3, [r2, #12]

	// Enable EXTI line in NVIC

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800039c:	2028      	movs	r0, #40	@ 0x28
 800039e:	f7ff ffb1 	bl	8000304 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003a2:	b662      	cpsie	i
}
 80003a4:	bf00      	nop

	// Enable global interrupts

	__enable_irq();
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020800 	.word	0x40020800
 80003b4:	40013800 	.word	0x40013800
 80003b8:	40013c00 	.word	0x40013c00

080003bc <main>:

#define UBTN EXTI_PR_PR13

uint32_t duty = 0;

int main(void){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	setClock();
 80003c0:	f000 f842 	bl	8000448 <setClock>
	pc13_exti_init();
 80003c4:	f7ff ffbc 	bl	8000340 <pc13_exti_init>
	Timer2_PWM_Init();
 80003c8:	f7ff ff06 	bl	80001d8 <Timer2_PWM_Init>

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <main+0x38>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d0:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <main+0x38>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80003d8:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <main+0x3c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a06      	ldr	r2, [pc, #24]	@ (80003f8 <main+0x3c>)
 80003de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 80003e4:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <main+0x3c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a03      	ldr	r2, [pc, #12]	@ (80003f8 <main+0x3c>)
 80003ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003ee:	6013      	str	r3, [r2, #0]


	while(1){
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <main+0x34>
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020000 	.word	0x40020000

080003fc <EXTI15_10_IRQHandler>:

	}
}

void EXTI15_10_IRQHandler(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	if(EXTI->PR & UBTN){
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <EXTI15_10_IRQHandler+0x44>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d011      	beq.n	8000430 <EXTI15_10_IRQHandler+0x34>
		duty = duty + 25;
 800040c:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <EXTI15_10_IRQHandler+0x48>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3319      	adds	r3, #25
 8000412:	4a0c      	ldr	r2, [pc, #48]	@ (8000444 <EXTI15_10_IRQHandler+0x48>)
 8000414:	6013      	str	r3, [r2, #0]
		if(duty > 100){
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <EXTI15_10_IRQHandler+0x48>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b64      	cmp	r3, #100	@ 0x64
 800041c:	d902      	bls.n	8000424 <EXTI15_10_IRQHandler+0x28>
			duty = 0;
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <EXTI15_10_IRQHandler+0x48>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
		}
		Timer2_SetDutyCycle(duty);
 8000424:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <EXTI15_10_IRQHandler+0x48>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	b29b      	uxth	r3, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff4a 	bl	80002c4 <Timer2_SetDutyCycle>
	}
	EXTI->PR |= UBTN;
 8000430:	4b03      	ldr	r3, [pc, #12]	@ (8000440 <EXTI15_10_IRQHandler+0x44>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a02      	ldr	r2, [pc, #8]	@ (8000440 <EXTI15_10_IRQHandler+0x44>)
 8000436:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800043a:	6153      	str	r3, [r2, #20]

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40013c00 	.word	0x40013c00
 8000444:	2000001c 	.word	0x2000001c

08000448 <setClock>:
#include "stm32f411xe.h"
#include "myClockConf.h"


void setClock(void){
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

	// Turn on HSI
	RCC->CR |= RCC_CR_HSION;
 800044c:	4b35      	ldr	r3, [pc, #212]	@ (8000524 <setClock+0xdc>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	@ (8000524 <setClock+0xdc>)
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6013      	str	r3, [r2, #0]

	// Wait for HSI to be ready
	while(!(RCC->CR & RCC_CR_HSIRDY)){}
 8000458:	bf00      	nop
 800045a:	4b32      	ldr	r3, [pc, #200]	@ (8000524 <setClock+0xdc>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0f9      	beq.n	800045a <setClock+0x12>

	// Temporarily make HSI the system clock

	RCC->CFGR &= ~RCC_CFGR_SW;
 8000466:	4b2f      	ldr	r3, [pc, #188]	@ (8000524 <setClock+0xdc>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	4a2e      	ldr	r2, [pc, #184]	@ (8000524 <setClock+0xdc>)
 800046c:	f023 0303 	bic.w	r3, r3, #3
 8000470:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000472:	bf00      	nop
 8000474:	4b2b      	ldr	r3, [pc, #172]	@ (8000524 <setClock+0xdc>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f003 030c 	and.w	r3, r3, #12
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f9      	bne.n	8000474 <setClock+0x2c>

	// Disable PLL to configure it
	RCC->CR &= ~RCC_CR_PLLON;
 8000480:	4b28      	ldr	r3, [pc, #160]	@ (8000524 <setClock+0xdc>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a27      	ldr	r2, [pc, #156]	@ (8000524 <setClock+0xdc>)
 8000486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800048a:	6013      	str	r3, [r2, #0]
	// Wait until PLL is fully stopped
	while (RCC->CR & RCC_CR_PLLRDY);
 800048c:	bf00      	nop
 800048e:	4b25      	ldr	r3, [pc, #148]	@ (8000524 <setClock+0xdc>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f9      	bne.n	800048e <setClock+0x46>

	/* Configure PLL */

	// Reset PLLCFGR register
	RCC->PLLCFGR = 0;
 800049a:	4b22      	ldr	r3, [pc, #136]	@ (8000524 <setClock+0xdc>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]

	// HSI as PLL source

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 80004a0:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <setClock+0xdc>)
 80004a2:	4a20      	ldr	r2, [pc, #128]	@ (8000524 <setClock+0xdc>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	6053      	str	r3, [r2, #4]
	 * PLLN = 192
	 * PLLM = 16
	 * PLLP = 4 (0b01)
	 */

	RCC->PLLCFGR |= (16U << RCC_PLLCFGR_PLLM_Pos);
 80004a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <setClock+0xdc>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000524 <setClock+0xdc>)
 80004ae:	f043 0310 	orr.w	r3, r3, #16
 80004b2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (192U << RCC_PLLCFGR_PLLN_Pos);
 80004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <setClock+0xdc>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000524 <setClock+0xdc>)
 80004ba:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80004be:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (1U << RCC_PLLCFGR_PLLP_Pos);
 80004c0:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <setClock+0xdc>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	4a17      	ldr	r2, [pc, #92]	@ (8000524 <setClock+0xdc>)
 80004c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004ca:	6053      	str	r3, [r2, #4]

	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <setClock+0xdc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <setClock+0xdc>)
 80004d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d6:	6013      	str	r3, [r2, #0]
	// Wait until PLL is ready
	while (!(RCC->CR & RCC_CR_PLLRDY)){}
 80004d8:	bf00      	nop
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <setClock+0xdc>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f9      	beq.n	80004da <setClock+0x92>

	// Configure Flash latency (1 wait state for 48 MHz, Table 5, ref manual)
	FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80004e6:	4b10      	ldr	r3, [pc, #64]	@ (8000528 <setClock+0xe0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000528 <setClock+0xe0>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]

	// 7. Switch SYSCLK to PLL
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <setClock+0xdc>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <setClock+0xdc>)
 80004f8:	f023 0303 	bic.w	r3, r3, #3
 80004fc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <setClock+0xdc>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <setClock+0xdc>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800050a:	bf00      	nop
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <setClock+0xdc>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	f003 030c 	and.w	r3, r3, #12
 8000514:	2b08      	cmp	r3, #8
 8000516:	d1f9      	bne.n	800050c <setClock+0xc4>


}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40023800 	.word	0x40023800
 8000528:	40023c00 	.word	0x40023c00

0800052c <Reset_Handler>:
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <LoopForever+0x2>)
 800052e:	4685      	mov	sp, r0
 8000530:	f3af 8000 	nop.w
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <LoopForever+0x6>)
 8000536:	490d      	ldr	r1, [pc, #52]	@ (800056c <LoopForever+0xa>)
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <LoopForever+0xe>)
 800053a:	2300      	movs	r3, #0
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:
 800053e:	58d4      	ldr	r4, [r2, r3]
 8000540:	50c4      	str	r4, [r0, r3]
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:
 8000544:	18c4      	adds	r4, r0, r3
 8000546:	428c      	cmp	r4, r1
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
 800054a:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <LoopForever+0x12>)
 800054c:	4c0a      	ldr	r4, [pc, #40]	@ (8000578 <LoopForever+0x16>)
 800054e:	2300      	movs	r3, #0
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:
 8000556:	42a2      	cmp	r2, r4
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>
 800055a:	f000 f811 	bl	8000580 <__libc_init_array>
 800055e:	f7ff ff2d 	bl	80003bc <main>

08000562 <LoopForever>:
 8000562:	e7fe      	b.n	8000562 <LoopForever>
 8000564:	20020000 	.word	0x20020000
 8000568:	20000000 	.word	0x20000000
 800056c:	20000000 	.word	0x20000000
 8000570:	080005e8 	.word	0x080005e8
 8000574:	20000000 	.word	0x20000000
 8000578:	20000020 	.word	0x20000020

0800057c <ADC_IRQHandler>:
 800057c:	e7fe      	b.n	800057c <ADC_IRQHandler>
	...

08000580 <__libc_init_array>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	4d0d      	ldr	r5, [pc, #52]	@ (80005b8 <__libc_init_array+0x38>)
 8000584:	4c0d      	ldr	r4, [pc, #52]	@ (80005bc <__libc_init_array+0x3c>)
 8000586:	1b64      	subs	r4, r4, r5
 8000588:	10a4      	asrs	r4, r4, #2
 800058a:	2600      	movs	r6, #0
 800058c:	42a6      	cmp	r6, r4
 800058e:	d109      	bne.n	80005a4 <__libc_init_array+0x24>
 8000590:	4d0b      	ldr	r5, [pc, #44]	@ (80005c0 <__libc_init_array+0x40>)
 8000592:	4c0c      	ldr	r4, [pc, #48]	@ (80005c4 <__libc_init_array+0x44>)
 8000594:	f000 f818 	bl	80005c8 <_init>
 8000598:	1b64      	subs	r4, r4, r5
 800059a:	10a4      	asrs	r4, r4, #2
 800059c:	2600      	movs	r6, #0
 800059e:	42a6      	cmp	r6, r4
 80005a0:	d105      	bne.n	80005ae <__libc_init_array+0x2e>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a8:	4798      	blx	r3
 80005aa:	3601      	adds	r6, #1
 80005ac:	e7ee      	b.n	800058c <__libc_init_array+0xc>
 80005ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b2:	4798      	blx	r3
 80005b4:	3601      	adds	r6, #1
 80005b6:	e7f2      	b.n	800059e <__libc_init_array+0x1e>
 80005b8:	080005e0 	.word	0x080005e0
 80005bc:	080005e0 	.word	0x080005e0
 80005c0:	080005e0 	.word	0x080005e0
 80005c4:	080005e4 	.word	0x080005e4

080005c8 <_init>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

080005d4 <_fini>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr
